# Reason: Test hitted a banned word int8
def test_primitive_conversions(self):
    cases = [
        ("int8", "int8", 5, 5),
        ("int8", "int16", 5, 5),
        ("int8", "int32", 5, 5),
        ("int8", "int64", 5, 5),
        ("int8", "uint8", -1, 255),
        ("int8", "uint8", 12, 12),
        ("int8", "uint16", -1, 65535),
        ("int8", "uint16", 12, 12),
        ("int8", "uint32", -1, 4294967295),
        ("int8", "uint32", 12, 12),
        ("int8", "uint64", -1, 18446744073709551615),
        ("int8", "uint64", 12, 12),
        ("int16", "int8", 5, 5),
        ("int16", "int8", -1, -1),
        ("int16", "int8", 32767, -1),
        ("int16", "int16", 5, 5),
        ("int16", "int32", -5, -5),
        ("int16", "int64", -6, -6),
        ("int16", "uint8", 32767, 255),
        ("int16", "uint8", -1, 255),
        ("int16", "uint16", 32767, 32767),
        ("int16", "uint16", -1, 65535),
        ("int16", "uint32", 1000, 1000),
        ("int16", "uint32", -1, 4294967295),
        ("int16", "uint64", 1414, 1414),
        ("int16", "uint64", -1, 18446744073709551615),
        ("int32", "int8", 5, 5),
        ("int32", "int8", -1, -1),
        ("int32", "int8", 2147483647, -1),
        ("int32", "int16", 5, 5),
        ("int32", "int16", -1, -1),
        ("int32", "int16", 2147483647, -1),
        ("int32", "int32", 5, 5),
        ("int32", "int64", 5, 5),
        ("int32", "uint8", 5, 5),
        ("int32", "uint8", 65535, 255),
        ("int32", "uint8", -1, 255),
        ("int32", "uint16", 5, 5),
        ("int32", "uint16", 2147483647, 65535),
        ("int32", "uint16", -1, 65535),
        ("int32", "uint32", 5, 5),
        ("int32", "uint32", -1, 4294967295),
        ("int32", "uint64", 5, 5),
        ("int32", "uint64", -1, 18446744073709551615),
        ("int64", "int8", 5, 5),
        ("int64", "int8", -1, -1),
        ("int64", "int8", 65535, -1),
        ("int64", "int16", 5, 5),
        ("int64", "int16", -1, -1),
        ("int64", "int16", 4294967295, -1),
        ("int64", "int32", 5, 5),
        ("int64", "int32", -1, -1),
        ("int64", "int32", 9223372036854775807, -1),
        ("int64", "int64", 5, 5),
        ("int64", "uint8", 5, 5),
        ("int64", "uint8", 65535, 255),
        ("int64", "uint8", -1, 255),
        ("int64", "uint16", 5, 5),
        ("int64", "uint16", 4294967295, 65535),
        ("int64", "uint16", -1, 65535),
        ("int64", "uint32", 5, 5),
        ("int64", "uint32", 9223372036854775807, 4294967295),
        ("int64", "uint32", -1, 4294967295),
        ("int64", "uint64", 5, 5),
        ("int64", "uint64", -1, 18446744073709551615),
        ("uint8", "int8", 5, 5),
        ("uint8", "int8", 255, -1),
        ("uint8", "int16", 255, 255),
        ("uint8", "int32", 255, 255),
        ("uint8", "int64", 255, 255),
        ("uint8", "uint8", 5, 5),
        ("uint8", "uint16", 255, 255),
        ("uint8", "uint32", 255, 255),
        ("uint8", "uint64", 255, 255),
        ("uint16", "int8", 5, 5),
        ("uint16", "int8", 65535, -1),
        ("uint16", "int16", 5, 5),
        ("uint16", "int16", 65535, -1),
        ("uint16", "int32", 65535, 65535),
        ("uint16", "int64", 65535, 65535),
        ("uint16", "uint8", 65535, 255),
        ("uint16", "uint16", 65535, 65535),
        ("uint16", "uint32", 65535, 65535),
        ("uint16", "uint64", 65535, 65535),
        ("uint32", "int8", 4, 4),
        ("uint32", "int8", 4294967295, -1),
        ("uint32", "int16", 5, 5),
        ("uint32", "int16", 4294967295, -1),
        ("uint32", "int32", 65535, 65535),
        ("uint32", "int32", 4294967295, -1),
        ("uint32", "int64", 4294967295, 4294967295),
        ("uint32", "uint8", 4, 4),
        ("uint32", "uint8", 65535, 255),
        ("uint32", "uint16", 4294967295, 65535),
        ("uint32", "uint32", 5, 5),
        ("uint32", "uint64", 4294967295, 4294967295),
        ("uint64", "int8", 4, 4),
        ("uint64", "int8", 18446744073709551615, -1),
        ("uint64", "int16", 4, 4),
        ("uint64", "int16", 18446744073709551615, -1),
        ("uint64", "int32", 4, 4),
        ("uint64", "int32", 18446744073709551615, -1),
        ("uint64", "int64", 4, 4),
        ("uint64", "int64", 18446744073709551615, -1),
        ("uint64", "uint8", 5, 5),
        ("uint64", "uint8", 65535, 255),
        ("uint64", "uint16", 4294967295, 65535),
        ("uint64", "uint32", 18446744073709551615, 4294967295),
        ("uint64", "uint64", 5, 5),
    ]
    for src, dest, val, expected in cases:
        codestr = f"""
            from __static__ import {src}, {dest}, box
            def y() -> int:
                x = {dest}({src}({val}))
                return box(x)
        """
        with self.subTest(src=src, dest=dest, val=val, expected=expected):
            with self.in_module(codestr) as mod:
                y = mod.y
                actual = y()
                self.assertEqual(
                    actual,
                    expected,
                    f"failing case: {[src, dest, val, actual, expected]}",
                )
