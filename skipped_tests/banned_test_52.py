# Reason: Test hitted a banned word int8
def test_int_binop(self):
    tests = [
        ("int8", 1, 2, "/", 0),
        ("int8", 4, 2, "/", 2),
        ("int8", 4, -2, "/", -2),
        ("uint8", 0xFF, 0x7F, "/", 2),
        ("int16", 4, -2, "/", -2),
        ("uint16", 0xFF, 0x7F, "/", 2),
        ("uint32", 0xFFFF, 0x7FFF, "/", 2),
        ("int32", 4, -2, "/", -2),
        ("uint32", 0xFF, 0x7F, "/", 2),
        ("uint32", 0xFFFFFFFF, 0x7FFFFFFF, "/", 2),
        ("int64", 4, -2, "/", -2),
        ("uint64", 0xFF, 0x7F, "/", 2),
        ("uint64", 0xFFFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF, "/", 2),
        ("int8", 1, -2, "-", 3),
        ("int8", 1, 2, "-", -1),
        ("int16", 1, -2, "-", 3),
        ("int16", 1, 2, "-", -1),
        ("int32", 1, -2, "-", 3),
        ("int32", 1, 2, "-", -1),
        ("int64", 1, -2, "-", 3),
        ("int64", 1, 2, "-", -1),
        ("int8", 1, -2, "*", -2),
        ("int8", 1, 2, "*", 2),
        ("int16", 1, -2, "*", -2),
        ("int16", 1, 2, "*", 2),
        ("int32", 1, -2, "*", -2),
        ("int32", 1, 2, "*", 2),
        ("int64", 1, -2, "*", -2),
        ("int64", 1, 2, "*", 2),
        ("int8", 1, -2, "&", 0),
        ("int8", 1, 3, "&", 1),
        ("int16", 1, 3, "&", 1),
        ("int16", 1, 3, "&", 1),
        ("int32", 1, 3, "&", 1),
        ("int32", 1, 3, "&", 1),
        ("int64", 1, 3, "&", 1),
        ("int64", 1, 3, "&", 1),
        ("int8", 1, 2, "|", 3),
        ("uint8", 1, 2, "|", 3),
        ("int16", 1, 2, "|", 3),
        ("uint16", 1, 2, "|", 3),
        ("int32", 1, 2, "|", 3),
        ("uint32", 1, 2, "|", 3),
        ("int64", 1, 2, "|", 3),
        ("uint64", 1, 2, "|", 3),
        ("int8", 1, 3, "^", 2),
        ("uint8", 1, 3, "^", 2),
        ("int16", 1, 3, "^", 2),
        ("uint16", 1, 3, "^", 2),
        ("int32", 1, 3, "^", 2),
        ("uint32", 1, 3, "^", 2),
        ("int64", 1, 3, "^", 2),
        ("uint64", 1, 3, "^", 2),
        ("int8", 1, 3, "%", 1),
        ("uint8", 1, 3, "%", 1),
        ("int16", 1, 3, "%", 1),
        ("uint16", 1, 3, "%", 1),
        ("int32", 1, 3, "%", 1),
        ("uint32", 1, 3, "%", 1),
        ("int64", 1, 3, "%", 1),
        ("uint64", 1, 3, "%", 1),
        ("int8", 1, -3, "%", 1),
        ("uint8", 1, 0xFF, "%", 1),
        ("int16", 1, -3, "%", 1),
        ("uint16", 1, 0xFFFF, "%", 1),
        ("int32", 1, -3, "%", 1),
        ("uint32", 1, 0xFFFFFFFF, "%", 1),
        ("int64", 1, -3, "%", 1),
        ("uint64", 1, 0xFFFFFFFFFFFFFFFF, "%", 1),
        ("int8", 1, 2, "<<", 4),
        ("uint8", 1, 2, "<<", 4),
        ("int16", 1, 2, "<<", 4),
        ("uint16", 1, 2, "<<", 4),
        ("int32", 1, 2, "<<", 4),
        ("uint32", 1, 2, "<<", 4),
        ("int64", 1, 2, "<<", 4),
        ("uint64", 1, 2, "<<", 4),
        ("int8", 4, 1, ">>", 2),
        ("int8", -1, 1, ">>", -1),
        ("uint8", 0xFF, 1, ">>", 127),
        ("int16", 4, 1, ">>", 2),
        ("int16", -1, 1, ">>", -1),
        ("uint16", 0xFFFF, 1, ">>", 32767),
        ("int32", 4, 1, ">>", 2),
        ("int32", -1, 1, ">>", -1),
        ("uint32", 0xFFFFFFFF, 1, ">>", 2147483647),
        ("int64", 4, 1, ">>", 2),
        ("int64", -1, 1, ">>", -1),
        ("uint64", 0xFFFFFFFFFFFFFFFF, 1, ">>", 9223372036854775807),
    ]
    for type, x, y, op, res in tests:
        codestr = f"""
        from __static__ import {type}, box
        def testfunc(tst):
            x: {type} = {x}
            y: {type} = {y}
            if tst:
                x = x + 1
                y = y + 2
            z: {type} = x {op} y
            return box(z), box(x {op} y)
        """
        with self.subTest(type=type, x=x, y=y, op=op, res=res):
            with self.in_module(codestr) as mod:
                f = mod.testfunc
                self.assertEqual(f(False), (res, res), f"{type} {x} {op} {y} {res}")
